// Generated by CoffeeScript 1.4.0
(function() {
  var Easel, _ref;

  if ((_ref = this.tacit) == null) {
    this.tacit = {};
  }

  Easel = (function() {

    function Easel(project, toolbarLoc, padLoc, padHeight, padWidth, structure) {
      var padHtmlRect;
      this.project = project;
      if (structure == null) {
        structure = null;
      }
      padHtmlRect = d3.select(padLoc).node().getBoundingClientRect();
      if (padWidth == null) {
        padWidth = htmlRect.width;
      }
      if (padHeight == null) {
        padHeight = htmlRect.height;
      }
      this.pad = new tacit.Pad(this, padLoc, padHeight, padWidth, structure);
    }

    Easel.prototype.mouseDown = function(easel, eventType, mouseLoc, object) {
      if (this.currentTool != null) {
        if (this.currentTool.mouseDown != null) {
          this.currentTool.mouseDown(easel, eventType, mouseLoc, object);
        }
      }
      return false;
    };

    Easel.prototype.mouseUp = function(easel, eventType, mouseLoc, object) {
      if (this.currentTool != null) {
        if (this.currentTool.mouseUp != null) {
          this.currentTool.mouseUp(easel, eventType, mouseLoc, object);
        }
      }
      return false;
    };

    Easel.prototype.mouseMove = function(easel, eventType, mouseLoc, object) {
      if (this.currentTool != null) {
        if (this.currentTool.mouseMove != null) {
          this.currentTool.mouseMove(easel, eventType, mouseLoc, object);
          return false;
        }
      }
      return false;
    };

    Easel.prototype.keyDown = function(easel, eventType, keyCode) {
      var link, node, _i, _j, _len, _len1, _ref1, _ref2;
      if (this.currentTool != null) {
        if (this.currentTool.keyDown != null) {
          this.currentTool.keyDown(easel, eventType, keyCode);
          return false;
        }
      }
      console.log(["kD", easel, eventType, keyCode]);
      if (keyCode === 8 || keyCode === 46) {
        _ref1 = this.pad.sketch.selectedNodes;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          node = _ref1[_i];
          console.log(node);
          node["delete"]();
        }
        _ref2 = this.pad.sketch.selectedLinks;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          link = _ref2[_j];
          link["delete"]();
        }
        this.pad.sketch.selectedLinks = this.pad.sketch.selectedNodes = [];
        this.pad.sketch.redraw();
      }
      return false;
    };

    return Easel;

  })();

  this.tacit.Easel = Easel;

}).call(this);
