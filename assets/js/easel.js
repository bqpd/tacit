// Generated by CoffeeScript 1.4.0
(function() {
  var Easel, _ref;

  if ((_ref = this.tacit) == null) {
    this.tacit = {};
  }

  Easel = (function() {

    function Easel(project, toolbarLoc, padLoc, padHeight, padWidth, structure) {
      var padHtmlRect;
      this.project = project;
      if (structure == null) {
        structure = null;
      }
      padHtmlRect = d3.select(padLoc).node().getBoundingClientRect();
      if (padWidth == null) {
        padWidth = htmlRect.width;
      }
      if (padHeight == null) {
        padHeight = htmlRect.height;
      }
      this.pad = new tacit.Pad(this, padLoc, padHeight, padWidth, structure);
    }

    Easel.prototype.mouseDown = function(easel, eventType, mouseLoc, object) {
      if (this.currentTool != null) {
        if (this.currentTool.mouseDown != null) {
          return this.currentTool.mouseDown(easel, eventType, mouseLoc, object);
        }
      } else {
        return false;
      }
    };

    Easel.prototype.mouseUp = function(easel, eventType, mouseLoc, object) {
      if (this.currentTool != null) {
        if (this.currentTool.mouseUp != null) {
          return this.currentTool.mouseUp(easel, eventType, mouseLoc, object);
        }
      } else {
        return false;
      }
    };

    Easel.prototype.mouseMove = function(easel, eventType, mouseLoc, object) {
      if (this.currentTool != null) {
        if (this.currentTool.mouseMove != null) {
          return this.currentTool.mouseMove(easel, eventType, mouseLoc, object);
        }
      } else {
        return false;
      }
    };

    Easel.prototype.keyDown = function(easel, eventType, mouseLoc, object) {
      if (this.currentTool != null) {
        if (this.currentTool.keyDown != null) {
          return this.currentTool.keyDown(easel, eventType, mouseLoc, object);
        }
      } else {
        return print("kD");
      }
    };

    return Easel;

  })();

  this.tacit.Easel = Easel;

}).call(this);
