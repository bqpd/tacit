// Generated by CoffeeScript 1.9.2
(function() {
  var Suggestions, dummyEasel, r;

  if (window.tacit == null) {
    window.tacit = {};
  }

  r = function() {
    return 2 * Math.random() - 1;
  };

  dummyEasel = (function() {
    function dummyEasel(suggestions, i1) {
      this.suggestions = suggestions;
      this.i = i1;
      null;
    }

    dummyEasel.prototype.mouseDown = function(easel, eventType, mouseLoc, object) {
      console.log(this.i);
      this.suggestions.project.easel.pad.load(this.suggestions.pads[this.i].sketch.structure);
      this.suggestions.project.easel.pad.sketch.onChange = (function(_this) {
        return function() {
          return _this.suggestions.update(_this.suggestions.project.easel.pad.sketch.structure);
        };
      })(this);
      this.suggestions.project.easel.pad.sketch.updateDrawing();
      return false;
    };

    dummyEasel.prototype.mouseUp = function(easel, eventType, mouseLoc, object) {
      return false;
    };

    dummyEasel.prototype.mouseMove = function(easel, eventType, mouseLoc, object) {
      return false;
    };

    return dummyEasel;

  })();

  Suggestions = (function() {
    function Suggestions(project, htmlLoc) {
      var i, j, structure;
      this.project = project;
      this.htmlLoc = htmlLoc;
      this.project.easel.pad.sketch.onChange = (function(_this) {
        return function() {
          return _this.update(_this.project.easel.pad.sketch.structure);
        };
      })(this);
      structure = new tacit.Structure(this.project.easel.pad.sketch.structure);
      this.pads = [];
      for (i = j = 1; j <= 3; i = ++j) {
        this.pads.push(new tacit.Pad(new dummyEasel(this, i), this.htmlLoc, 200, 200, structure));
      }
      this.update(structure);
    }

    Suggestions.prototype.mutate = function(structure) {
      var delta, dg, j, len, node, ref, results;
      ref = structure.nodeList;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        node = ref[j];
        dg = 200 * r() * structure.nodeList.length / structure.lp.obj;
        delta = {
          x: node.grad.x * dg * !node.fixed.x,
          y: node.grad.y * dg * !node.fixed.y,
          z: node.grad.z * dg * !node.fixed.z
        };
        results.push(node.move(delta));
      }
      return results;
    };

    Suggestions.prototype.update = function(structure) {
      var j, len, pad, ref, results;
      ref = this.pads;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        pad = ref[j];
        structure = new tacit.Structure(structure);
        structure.solve();
        this.mutate(structure);
        pad.load(structure);
        pad.sketch.nodeSize = 0;
        pad.sketch.showforce = false;
        results.push(pad.sketch.updateDrawing());
      }
      return results;
    };

    return Suggestions;

  })();

  window.tacit.Suggestions = Suggestions;

}).call(this);
