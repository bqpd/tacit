// Generated by CoffeeScript 1.4.0
(function() {
  var Suggestions, dummyEasel, r, _ref;

  if ((_ref = window.tacit) == null) {
    window.tacit = {};
  }

  r = function() {
    return 2 * Math.random() - 1;
  };

  dummyEasel = {
    mouseDown: function(easel, eventType, mouseLoc, object) {
      if (this.currentTool != null) {
        if (this.currentTool.mouseDown != null) {
          this.currentTool.mouseDown(easel, eventType, mouseLoc, object);
        }
      }
      return false;
    },
    mouseUp: function(easel, eventType, mouseLoc, object) {
      if (this.currentTool != null) {
        if (this.currentTool.mouseUp != null) {
          this.currentTool.mouseUp(easel, eventType, mouseLoc, object);
        }
      }
      return false;
    },
    mouseMove: function(easel, eventType, mouseLoc, object) {
      if (this.currentTool != null) {
        if (this.currentTool.mouseMove != null) {
          this.currentTool.mouseMove(easel, eventType, mouseLoc, object);
        }
      }
      return false;
    }
  };

  Suggestions = (function() {

    function Suggestions(project, htmlLoc) {
      var i, structure, _i,
        _this = this;
      this.project = project;
      this.htmlLoc = htmlLoc;
      this.project.easel.pad.sketch.onChange = function() {
        return _this.update(_this.project.easel.pad.sketch.structure);
      };
      structure = new tacit.Structure(this.project.easel.pad.sketch.structure);
      this.pads = [];
      for (i = _i = 1; _i <= 3; i = ++_i) {
        this.pads.push(new tacit.Pad(dummyEasel, this.htmlLoc, 200, 200, structure));
      }
      this.update(structure);
    }

    Suggestions.prototype.mutate = function(structure) {
      var delta, dg, node, _i, _len, _ref1, _results;
      _ref1 = structure.nodeList;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        node = _ref1[_i];
        dg = 200 * r() * structure.nodeList.length / structure.lp.obj;
        delta = {
          x: node.grad.x * dg * !node.fixed.x,
          y: node.grad.y * dg * !node.fixed.y,
          z: node.grad.z * dg * !node.fixed.z
        };
        _results.push(node.move(delta));
      }
      return _results;
    };

    Suggestions.prototype.update = function(structure) {
      var i, pad, _i, _len, _ref1, _results,
        _this = this;
      _ref1 = this.pads;
      _results = [];
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        pad = _ref1[i];
        structure = new tacit.Structure(structure);
        structure.solve();
        this.mutate(structure);
        pad.load(structure);
        pad.sketch.nodeSize = 0;
        pad.sketch.showforce = false;
        pad.sketch.updateDrawing();
        _results.push(pad.sketch.svg.on("mousedown", function(d) {
          console.log(structure.lp.obj);
          _this.project.easel.pad.load(structure);
          _this.project.easel.pad.sketch.onChange = function() {
            return _this.update(_this.project.easel.pad.sketch.structure);
          };
          return _this.project.easel.pad.sketch.updateDrawing();
        }));
      }
      return _results;
    };

    return Suggestions;

  })();

  window.tacit.Suggestions = Suggestions;

}).call(this);
