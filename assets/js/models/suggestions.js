// Generated by CoffeeScript 1.4.0
(function() {
  var Suggestions, dummyEasel, r, _ref;

  if ((_ref = window.tacit) == null) {
    window.tacit = {};
  }

  r = function() {
    return 2 * Math.random() - 1;
  };

  dummyEasel = (function() {

    function dummyEasel(suggestions, i) {
      this.suggestions = suggestions;
      this.i = i;
      null;
    }

    dummyEasel.prototype.mouseDown = function(easel, eventType, mouseLoc, object) {
      var drawpad, pad, scale,
        _this = this;
      console.log(this.i);
      pad = this.suggestions.pads[this.i];
      drawpad = this.suggestions.project.easel.pad;
      scale = Math.min(pad.height / drawpad.height, pad.width / drawpad.width);
      this.suggestions.project.easel.pad.load(pad.sketch.structure, scale = pad.sketch.scale / scale);
      this.suggestions.project.easel.pad.sketch.onChange = function() {
        return _this.suggestions.update(_this.suggestions.project.easel.pad.sketch.structure);
      };
      this.suggestions.project.easel.pad.sketch.updateDrawing();
      undoredo.log();
      return false;
    };

    dummyEasel.prototype.allowPan = function() {
      return false;
    };

    dummyEasel.prototype.mouseUp = function(easel, eventType, mouseLoc, object) {
      return false;
    };

    dummyEasel.prototype.mouseMove = function(easel, eventType, mouseLoc, object) {
      return false;
    };

    return dummyEasel;

  })();

  Suggestions = (function() {

    function Suggestions(project, htmlLoc) {
      var i, structure, _i,
        _this = this;
      this.project = project;
      this.htmlLoc = htmlLoc;
      this.project.easel.pad.sketch.onChange = function() {
        return _this.update(_this.project.easel.pad.sketch.structure);
      };
      structure = new tacit.Structure(this.project.easel.pad.sketch.structure);
      this.pads = [];
      for (i = _i = 0; _i <= 2; i = ++_i) {
        this.pads.push(new tacit.Pad(new dummyEasel(this, i), this.htmlLoc, 180, 180, structure));
      }
      this.update(structure);
    }

    Suggestions.prototype.mutate = function(structure) {
      var delta, dg, node, _i, _len, _ref1, _results;
      _ref1 = structure.nodeList;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        node = _ref1[_i];
        dg = 200 * r() * structure.nodeList.length / structure.lp.obj;
        delta = {
          x: node.grad.x * dg * !node.fixed.x,
          y: node.grad.y * dg * !node.fixed.y,
          z: node.grad.z * dg * !node.fixed.z
        };
        _results.push(node.move(delta));
      }
      return _results;
    };

    Suggestions.prototype.update = function(structure) {
      var draw, drawpad, pad, scale, _i, _len, _ref1, _results;
      drawpad = this.project.easel.pad;
      _ref1 = this.pads;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        pad = _ref1[_i];
        structure = new tacit.Structure(structure);
        structure.solve();
        this.mutate(structure);
        pad.load(structure);
        pad.sketch.nodeSize = 0;
        pad.sketch.rect.attr("fill", "transparent");
        pad.sketch.showforce = false;
        scale = Math.min(pad.height / drawpad.height, pad.width / drawpad.width);
        console.log(scale);
        console.log(pad.sketch.scale);
        pad.sketch.rescale([drawpad.sketch.translate[0], drawpad.sketch.translate[1]], scale * drawpad.sketch.scale, draw = false);
        _results.push(pad.sketch.updateDrawing());
      }
      return _results;
    };

    return Suggestions;

  })();

  window.tacit.Suggestions = Suggestions;

}).call(this);
