// Generated by CoffeeScript 1.9.2
(function() {
  var Versions, dummyEasel;

  if (window.tacit == null) {
    window.tacit = {};
  }

  dummyEasel = (function() {
    function dummyEasel(versions, i) {
      this.versions = versions;
      this.i = i;
      null;
    }

    dummyEasel.prototype.mouseDown = function(easel, eventType, mouseLoc, object) {
      console.log(this.i);
      this.versions.project.easel.pad.load(this.versions.history[this.i].sketch.structure);
      this.versions.project.easel.pad.sketch.onChange = (function(_this) {
        return function() {
          return suggestions.update(suggestions.project.easel.pad.sketch.structure);
        };
      })(this);
      this.versions.project.easel.pad.sketch.updateDrawing();
      return false;
    };

    dummyEasel.prototype.mouseUp = function(easel, eventType, mouseLoc, object) {
      return false;
    };

    dummyEasel.prototype.mouseMove = function(easel, eventType, mouseLoc, object) {
      return false;
    };

    return dummyEasel;

  })();

  Versions = (function() {
    function Versions(project, htmlLoc) {
      this.project = project;
      this.htmlLoc = htmlLoc;
      this.history = [];
    }

    Versions.prototype.save = function() {
      var pad, structure;
      if (this.project.actionQueue.length > 1) {
        console.log("save");
        structure = new tacit.Structure(this.project.easel.pad.sketch.structure);
        structure.solve();
        pad = new tacit.Pad(new dummyEasel(this, this.history.length), this.htmlLoc, 100, 100, structure);
        this.history.push(pad);
        pad.load(structure);
        pad.sketch.nodeSize = 0;
        pad.sketch.showforce = false;
        pad.sketch.updateDrawing();
      }
      this.project.actionQueue = [this.project.actionQueue[this.project.actionQueue.length - 1]];
      return undoredo.pointer = 0;
    };

    return Versions;

  })();

  window.tacit.Versions = Versions;

}).call(this);
