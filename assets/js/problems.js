// Generated by CoffeeScript 1.4.0
(function() {
  var gd;

  gd = 1.65;

  window.sign = function() {
    var i, node, structure, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    structure = new tacit.Structure;
    new structure.Node({
      x: 20,
      y: gd
    });
    new structure.Node({
      x: 60,
      y: gd
    });
    new structure.Beam({
      x: 47,
      y: 72
    }, {
      x: 47,
      y: 97
    });
    _ref = [0, 1];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      structure.nodeList[i].fixed.y = true;
    }
    _ref1 = [0, 1];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      i = _ref1[_j];
      structure.nodeList[i].fixed.x = true;
    }
    structure.nodeList[2].force.x = 50;
    structure.nodeList[3].force.x = 50;
    _ref2 = structure.nodeList;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      node = _ref2[_k];
      node.immovable = true;
    }
    return structure;
  };

  window.bridge = function() {
    var hg, i, node, structure, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    hg = 50;
    structure = new tacit.Structure;
    new structure.Node({
      x: 0,
      y: gd
    });
    new structure.Node({
      x: 200,
      y: gd
    });
    _ref = [0, 1];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      structure.nodeList[i].fixed.y = true;
    }
    _ref1 = [0, 1];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      i = _ref1[_j];
      structure.nodeList[i].fixed.x = true;
    }
    new structure.Beam({
      x: 0,
      y: gd
    }, {
      x: 67,
      y: gd
    });
    new structure.Beam({
      x: 67,
      y: gd
    }, {
      x: 133,
      y: gd
    });
    new structure.Beam({
      x: 133,
      y: gd
    }, {
      x: 200,
      y: gd
    });
    structure.nodeList[2].force.y = -158;
    structure.nodeList[3].force.y = -158;
    _ref2 = structure.nodeList;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      node = _ref2[_k];
      node.immovable = true;
    }
    return structure;
  };

}).call(this);
