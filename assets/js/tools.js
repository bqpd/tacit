// Generated by CoffeeScript 1.4.0
(function() {
  var dist, drawTool, print, selectTool, _ref;

  print = function(o) {
    return console.log(o);
  };

  dist = function(a, b) {
    var ai, i;
    return sqrt(sum((function() {
      var _i, _len, _results;
      _results = [];
      for (i = _i = 0, _len = a.length; _i < _len; i = ++_i) {
        ai = a[i];
        _results.push(sqr(ai - (b ? b[i] : 0)));
      }
      return _results;
    })()));
  };

  if ((_ref = this.tacit) == null) {
    this.tacit = {};
  }

  selectTool = {
    mouseDown: function(easel, eventType, mouseLoc, object) {
      return null;
    },
    mouseUp: function(easel, eventType, mouseLoc, object) {
      var after, before, idx, selection;
      if (eventType !== "background") {
        if (eventType === "node") {
          selection = easel.pad.sketch.selectedNodes;
        } else {
          selection = easel.pad.sketch.selectedLinks;
        }
        idx = selection.indexOf(object);
        if (idx === -1) {
          selection.push(object);
        } else {
          print(object);
          print(selection);
          before = selection.slice(0, idx);
          print(before);
          after = selection[idx + 1];
          print(after);
          selection = before.concat(after);
          print(selection);
        }
        if (eventType === "node") {
          easel.pad.sketch.selectedNodes = selection;
        } else {
          easel.pad.sketch.selectedLinks = selection;
        }
        return easel.pad.sketch.reposition_transition();
      }
    },
    mouseMove: function(easel, eventType, mouseLoc, object) {
      return null;
    }
  };

  drawTool = {
    drawStart: null,
    mouseDown: function(easel, eventType, mouseLoc, object) {
      var node, pos;
      if (!this.drawStart) {
        if (eventType !== "node") {
          pos = {
            x: mouseLoc[0],
            y: mouseLoc[1]
          };
          node = new easel.pad.sketch.structure.Node(pos);
          node.force.y = -100;
          easel.pad.sketch.redraw();
        } else {
          pos = {
            x: object.x,
            y: object.y
          };
        }
        this.drawStart = pos;
        return easel.pad.sketch.dragline.attr("x1", pos.x).attr("x2", pos.x).attr("y1", pos.y).attr("y2", pos.y);
      }
    },
    mouseUp: function(easel, eventType, mouseLoc, object) {
      var node, pos;
      print(["mU", object]);
      if (this.drawStart) {
        if (eventType !== "node") {
          pos = {
            x: mouseLoc[0],
            y: mouseLoc[1]
          };
          node = new easel.pad.sketch.structure.Node(pos);
          node.force.y = -100;
        } else {
          pos = {
            x: object.x,
            y: object.y
          };
        }
        if (pos.x !== this.drawStart.x && pos.y !== this.drawStart.y) {
          new easel.pad.sketch.structure.Beam(this.drawStart, pos);
          easel.pad.sketch.dragline.attr("x1", pos.x).attr("x2", pos.x).attr("y1", pos.y).attr("y2", pos.y);
          easel.pad.sketch.redraw();
          return this.drawStart = null;
        }
      }
    },
    mouseMove: function(easel, eventType, mouseLoc, object) {
      if (this.drawStart) {
        easel.pad.sketch.dragline.attr("x2", mouseLoc[0]).attr("y2", mouseLoc[1]);
        if (easel.pad.sketch.reposition != null) {
          return easel.pad.sketch.reposition();
        }
      }
    }
  };

  this.tacit.tools = {
    draw: drawTool,
    select: selectTool
  };

}).call(this);
